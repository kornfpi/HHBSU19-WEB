// <auto-generated />
using HabitatWebApp.Data;
using HabitatWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HabitatWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("HabitatWebApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HabitatWebApp.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("IssueId");

                    b.Property<string>("Name");

                    b.Property<byte[]>("TheImage");

                    b.Property<DateTime>("Updated");

                    b.HasKey("ImageId");

                    b.HasIndex("IssueId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("HabitatWebApp.Models.Issue", b =>
                {
                    b.Property<int>("IssueID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Category");

                    b.Property<string>("Content");

                    b.Property<int?>("Location");

                    b.Property<string>("Title");

                    b.HasKey("IssueID");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("HabitatWebApp.Models.IssuePartSystem", b =>
                {
                    b.Property<int>("IssueID");

                    b.Property<int>("PartSystemID");

                    b.Property<int>("IssuePartSystemID");

                    b.HasKey("IssueID", "PartSystemID");

                    b.HasIndex("PartSystemID");

                    b.ToTable("IssuePartSystems");
                });

            modelBuilder.Entity("HabitatWebApp.Models.MaintenanceItem", b =>
                {
                    b.Property<int>("MaintenanceItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IssueID");

                    b.Property<string>("Name");

                    b.Property<int>("RecurrencePeriod");

                    b.HasKey("MaintenanceItemID");

                    b.HasIndex("IssueID");

                    b.ToTable("MaintenanceItems");
                });

            modelBuilder.Entity("HabitatWebApp.Models.Part", b =>
                {
                    b.Property<int>("PartID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("PartID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("HabitatWebApp.Models.PartSystem", b =>
                {
                    b.Property<int>("PartSystemID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("PartSystemID");

                    b.ToTable("PartSystems");
                });

            modelBuilder.Entity("HabitatWebApp.Models.PartSystemPart", b =>
                {
                    b.Property<int>("PartSystemID");

                    b.Property<int>("PartID");

                    b.Property<int>("PartSystemPartID");

                    b.HasKey("PartSystemID", "PartID");

                    b.HasIndex("PartID");

                    b.ToTable("PartSystemPart");
                });

            modelBuilder.Entity("HabitatWebApp.Models.PartSystemSymptom", b =>
                {
                    b.Property<int>("PartSystemID");

                    b.Property<int>("SymptomID");

                    b.Property<int>("PartSystemSymptomID");

                    b.HasKey("PartSystemID", "SymptomID");

                    b.HasIndex("SymptomID");

                    b.ToTable("PartSystemSymptom");
                });

            modelBuilder.Entity("HabitatWebApp.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("SymptomID");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HabitatWebApp.Models.Image", b =>
                {
                    b.HasOne("HabitatWebApp.Models.Issue", "Issue")
                        .WithMany("Images")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HabitatWebApp.Models.IssuePartSystem", b =>
                {
                    b.HasOne("HabitatWebApp.Models.Issue", "Issue")
                        .WithMany("IssuePartSystems")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HabitatWebApp.Models.PartSystem", "PartSystem")
                        .WithMany("IssuePartSystems")
                        .HasForeignKey("PartSystemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HabitatWebApp.Models.MaintenanceItem", b =>
                {
                    b.HasOne("HabitatWebApp.Models.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID");
                });

            modelBuilder.Entity("HabitatWebApp.Models.PartSystemPart", b =>
                {
                    b.HasOne("HabitatWebApp.Models.Part", "Part")
                        .WithMany("PartSystemParts")
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HabitatWebApp.Models.PartSystem", "PartSystem")
                        .WithMany("PartSystemParts")
                        .HasForeignKey("PartSystemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HabitatWebApp.Models.PartSystemSymptom", b =>
                {
                    b.HasOne("HabitatWebApp.Models.PartSystem", "PartSystem")
                        .WithMany("PartSystemSymptoms")
                        .HasForeignKey("PartSystemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HabitatWebApp.Models.Symptom", "Symptom")
                        .WithMany("PartSystemSymptoms")
                        .HasForeignKey("SymptomID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HabitatWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HabitatWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HabitatWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HabitatWebApp.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
